syntax = "proto3";
option go_package = "./todo";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "validate/validate.proto";

//messages land in *.pb.go as structs
message Task {
  uint64 id = 1;
  string description = 2;
  bool done = 3;
  google.protobuf.Timestamp due_date = 4;
}

message AddTaskRequest {
  string description = 1[
    (validate.rules).string.min_len = 1,
    (validate.rules).string.max_len = 100
  ];
  google.protobuf.Timestamp due_date = 2[
    (validate.rules).timestamp.gt_now = true
  ];
}

message AddTaskResponse {
  uint64 id = 1;
}

//using mask to control what fields to return
message ListTasksRequest{
  google.protobuf.FieldMask mask = 1;
}

message ListTasksResponse {
  Task task = 1;
  bool overdue = 2;
}

//This is sub-optimal, serializing custom defined type comes at cost
//message UpdateTaskRequest {
//  Task task = 1;
//}

//This is a preferred way even though there is some duplication
message UpdateTaskRequest {
  uint64 id = 1;
  string description = 2;
  bool done = 3;
  google.protobuf.Timestamp due_date = 4;
}

message UpdateTaskResponse {}

message DeleteTaskRequest {
  uint64 id = 1;
}

message DeleteTaskResponse {}

//services land in *_grpc.pb.go as implementations of client and sever
service TodoService {
  rpc AddTask(AddTaskRequest) returns (AddTaskResponse);
  rpc ListTasks(ListTasksRequest) returns (stream ListTasksResponse); //this is server streaming API example
  rpc UpdateTask(stream UpdateTaskRequest) returns (UpdateTaskResponse); //this is client streaming API example
  rpc DeleteTask(stream DeleteTaskRequest) returns (stream DeleteTaskResponse);
}